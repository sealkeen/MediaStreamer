// <auto-generated />
using System;
using MediaStreamer.DataAccess.NetStandard;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MediaStreamer.DataAccess.NetStandard.Migrations
{
    [DbContext(typeof(DMEntitiesContext))]
    partial class DMEntitiesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MediaStreamer.Domain.Administrator", b =>
                {
                    b.Property<Guid>("AdministratorID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AdministratorID");

                    b.Property<Guid?>("ModeratorID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ModeratorID");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("AdministratorID");

                    b.HasIndex("ModeratorID");

                    b.HasIndex("UserID");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Album", b =>
                {
                    b.Property<Guid>("AlbumID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AlbumID");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ArtistID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistID");

                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("Year")
                        .HasColumnType("bigint");

                    b.HasKey("AlbumID");

                    b.HasIndex("ArtistID");

                    b.HasIndex("GenreID");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("MediaStreamer.Domain.AlbumGenre", b =>
                {
                    b.Property<Guid>("AlbumID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AlbumID");

                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AlbumID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("AlbumGenre");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Artist", b =>
                {
                    b.Property<Guid>("ArtistID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistID");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ArtistID");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("MediaStreamer.Domain.ArtistGenre", b =>
                {
                    b.Property<Guid>("ArtistID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistID");

                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfApplication")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenreName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ArtistID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("ArtistGenre");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Composition", b =>
                {
                    b.Property<Guid>("CompositionID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompositionID");

                    b.Property<string>("About")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("AlbumID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AlbumID");

                    b.Property<Guid?>("ArtistID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistID");

                    b.Property<string>("CompositionName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePath")
                        .HasMaxLength(324)
                        .HasColumnType("nvarchar(324)");

                    b.Property<string>("Lyrics")
                        .HasMaxLength(3600)
                        .HasColumnType("nvarchar(3600)");

                    b.HasKey("CompositionID");

                    b.HasIndex("AlbumID");

                    b.HasIndex("ArtistID");

                    b.ToTable("Composition");
                });

            modelBuilder.Entity("MediaStreamer.Domain.CompositionVideo", b =>
                {
                    b.Property<Guid>("VideoID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VideoID");

                    b.Property<Guid>("CompositionID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompositionID");

                    b.HasKey("VideoID", "CompositionID");

                    b.HasIndex("CompositionID");

                    b.ToTable("CompositionVideo");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Genre", b =>
                {
                    b.Property<Guid>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenreName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("GenreID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MediaStreamer.Domain.ListenedComposition", b =>
                {
                    b.Property<Guid>("ListenedCompositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArtistID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompositionID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompositionID");

                    b.Property<long?>("CountOfPlays")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ListenDate")
                        .HasColumnType("DATETIME");

                    b.Property<double>("StoppedAt")
                        .HasColumnType("float");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("ListenedCompositionID");

                    b.HasIndex("ArtistID");

                    b.HasIndex("CompositionID");

                    b.HasIndex("UserID");

                    b.ToTable("ListenedComposition");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Moderator", b =>
                {
                    b.Property<Guid>("ModeratorID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ModeratorID");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("ModeratorID");

                    b.HasIndex("UserID");

                    b.ToTable("Moderator");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Picture", b =>
                {
                    b.Property<Guid>("PictureID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PictureID");

                    b.Property<string>("FilePath")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("SizeKb")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("XResolution")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("XResolution");

                    b.Property<Guid?>("YResolution")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("YResolution");

                    b.HasKey("PictureID");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("MediaStreamer.Domain.PlayerState", b =>
                {
                    b.Property<Guid>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StateTime")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("VolumeLevel")
                        .HasColumnType("NUMERIC(38,17)");

                    b.HasKey("StateID");

                    b.ToTable("PlayerStates");
                });

            modelBuilder.Entity("MediaStreamer.Domain.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("Bio")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("DateOfSignUp")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FaceBookLink")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("VKLink")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("VKLink");

                    b.HasKey("UserID");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "IX_User_UserName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Video", b =>
                {
                    b.Property<Guid>("VideoID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VideoID");

                    b.Property<double?>("FPS")
                        .HasColumnType("float")
                        .HasColumnName("FPS");

                    b.Property<string>("FilePath")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("SizeKb")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VariableFPS")
                        .HasColumnType("BIT")
                        .HasColumnName("VariableFPS");

                    b.Property<Guid?>("XResolution")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("XResolution");

                    b.Property<Guid?>("YResolution")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("YResolution");

                    b.HasKey("VideoID");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Administrator", b =>
                {
                    b.HasOne("MediaStreamer.Domain.Moderator", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorID");

                    b.HasOne("MediaStreamer.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Moderator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Album", b =>
                {
                    b.HasOne("MediaStreamer.Domain.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistID");

                    b.HasOne("MediaStreamer.Domain.Genre", "Genre")
                        .WithMany("Albums")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MediaStreamer.Domain.AlbumGenre", b =>
                {
                    b.HasOne("MediaStreamer.Domain.Album", "Album")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("AlbumID")
                        .IsRequired();

                    b.HasOne("MediaStreamer.Domain.Genre", "Genre")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("GenreID")
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MediaStreamer.Domain.ArtistGenre", b =>
                {
                    b.HasOne("MediaStreamer.Domain.Artist", "Artist")
                        .WithMany("ArtistGenres")
                        .HasForeignKey("ArtistID")
                        .IsRequired();

                    b.HasOne("MediaStreamer.Domain.Genre", "Genre")
                        .WithMany("ArtistGenres")
                        .HasForeignKey("GenreID")
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Composition", b =>
                {
                    b.HasOne("MediaStreamer.Domain.Album", "Album")
                        .WithMany("Compositions")
                        .HasForeignKey("AlbumID");

                    b.HasOne("MediaStreamer.Domain.Artist", "Artist")
                        .WithMany("Compositions")
                        .HasForeignKey("ArtistID");

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MediaStreamer.Domain.CompositionVideo", b =>
                {
                    b.HasOne("MediaStreamer.Domain.Composition", "Composition")
                        .WithMany("CompositionVideos")
                        .HasForeignKey("CompositionID")
                        .IsRequired();

                    b.HasOne("MediaStreamer.Domain.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composition");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("MediaStreamer.Domain.ListenedComposition", b =>
                {
                    b.HasOne("MediaStreamer.Domain.Artist", null)
                        .WithMany("ListenedCompositions")
                        .HasForeignKey("ArtistID");

                    b.HasOne("MediaStreamer.Domain.Composition", "Composition")
                        .WithMany("ListenedCompositions")
                        .HasForeignKey("CompositionID")
                        .IsRequired();

                    b.HasOne("MediaStreamer.Domain.User", "User")
                        .WithMany("ListenedCompositions")
                        .HasForeignKey("UserID")
                        .IsRequired();

                    b.Navigation("Composition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Moderator", b =>
                {
                    b.HasOne("MediaStreamer.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Album", b =>
                {
                    b.Navigation("AlbumGenres");

                    b.Navigation("Compositions");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("ArtistGenres");

                    b.Navigation("Compositions");

                    b.Navigation("ListenedCompositions");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Composition", b =>
                {
                    b.Navigation("CompositionVideos");

                    b.Navigation("ListenedCompositions");
                });

            modelBuilder.Entity("MediaStreamer.Domain.Genre", b =>
                {
                    b.Navigation("AlbumGenres");

                    b.Navigation("Albums");

                    b.Navigation("ArtistGenres");
                });

            modelBuilder.Entity("MediaStreamer.Domain.User", b =>
                {
                    b.Navigation("ListenedCompositions");
                });
#pragma warning restore 612, 618
        }
    }
}

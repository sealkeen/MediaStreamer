//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaStreamer.DataAccess.Net40
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Threading.Tasks;
    using MediaStreamer.Domain;

    public partial class DMEntities : DbContext, IDMDBContext
    {
        public DMEntities(string filePath = null)
            : base("name=DMEntities")
        {
            try
            {
                Database.CreateIfNotExists();
            }
            catch (Exception ex) {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
        }

        public void Clear()
        {
            Database.Delete();
            Database.Create();
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {

        }

        public virtual DbSet<Administrator> Administrators { get; set; }
        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<AlbumGenre> AlbumGenres { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<ArtistGenre> ArtistGenres { get; set; }
        public virtual DbSet<Composition> Compositions { get; set; }
        public virtual DbSet<CompositionVideo> CompositionVideos { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<GroupMember> GroupMembers { get; set; }
        public virtual DbSet<GroupRole> GroupRoles { get; set; }
        public virtual DbSet<ListenedAlbum> ListenedAlbums { get; set; }
        public virtual DbSet<ListenedArtist> ListenedArtists { get; set; }
        public virtual DbSet<ListenedComposition> ListenedCompositions { get; set; }
        public virtual DbSet<ListenedGenre> ListenedGenres { get; set; }
        public virtual DbSet<Moderator> Moderators { get; set; }
        public virtual DbSet<Musician> Musicians { get; set; }
        public virtual DbSet<MusicianRole> MusicianRoles { get; set; }
        public virtual DbSet<Picture> Pictures { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Video> Videos { get; set; }

        public void AddEntity<T>(T entity) where T : class
        {
            if (typeof(T) == typeof(Composition))
            
                Compositions.Add(entity as Composition);
            else if (typeof(T) == typeof(Album)) 
                Albums.Add(entity as Album);
            else if (typeof(T) == typeof(ListenedComposition))
                ListenedCompositions.Add(entity as ListenedComposition);
        }
        public void RemoveEntity<T>(T entity) where T : class
        {
            if (typeof(T) == typeof(Composition))
                Compositions.Remove(entity as Composition);
            else if (typeof(T) == typeof(Album))
                Albums.Remove(entity as Album);
            else if (typeof(T) == typeof(ListenedComposition))
                ListenedCompositions.Remove(entity as ListenedComposition);
        }

        public IQueryable<Administrator> GetAdministrators() { return Administrators; }
        void IDMDBContext.Add(Administrator administrator) => Administrators.Add(administrator);
        public IQueryable<Album> GetAlbums() { return Albums; }
        void IDMDBContext.Add(Album album) => Albums.Add(album);
        public IQueryable<AlbumGenre> GetAlbumGenres(){ return AlbumGenres; }
        void IDMDBContext.Add(AlbumGenre albumGenre) => AlbumGenres.Add(albumGenre);
        public IQueryable<Artist> GetArtists(){ return Artists; }
        void IDMDBContext.Add(Artist artist) => Artists.Add(artist);
        public IQueryable<ArtistGenre> GetArtistGenres(){ return ArtistGenres; }
        void IDMDBContext.Add(ArtistGenre artistGenre) => ArtistGenres.Add(artistGenre);
        public IQueryable<Composition> GetCompositions(){ return Compositions; }
        public Task<IQueryable<Composition>> GetCompositionsAsync()
        {
            return Task.Factory.StartNew(GetCompositions);
        }
        public IQueryable<IComposition> GetICompositions() { return Compositions; }
        void IDMDBContext.Add(Composition composition) => Compositions.Add(composition);
        public IQueryable<CompositionVideo> GetCompositionVideos(){ return CompositionVideos; }
        void IDMDBContext.Add(CompositionVideo compositionVideo) => CompositionVideos.Add(compositionVideo);
        public IQueryable<Genre> GetGenres(){ return Genres; }
        void IDMDBContext.Add(Genre genre) => Genres.Add(genre);
        public IQueryable<GroupMember> GetGroupMembers(){ return GroupMembers; }
        void IDMDBContext.Add(GroupMember groupMember) => GroupMembers.Add(groupMember);
        public IQueryable<GroupRole> GetGroupRoles(){ return GroupRoles; }
        void IDMDBContext.Add(GroupRole groupRole) => GroupRoles.Add(groupRole);
        public IQueryable<ListenedAlbum> GetListenedAlbums(){ return ListenedAlbums; }
        void IDMDBContext.Add(ListenedAlbum listenedAlbum) => ListenedAlbums .Add(listenedAlbum);
        public IQueryable<ListenedArtist> GetListenedArtists(){ return ListenedArtists; }
        void IDMDBContext.Add(ListenedArtist listenedArtist) => ListenedArtists.Add(listenedArtist);
        public IQueryable<ListenedComposition> GetListenedCompositions(){ return ListenedCompositions; }
        void IDMDBContext.Add(ListenedComposition listenedComposition) => ListenedCompositions.Add(listenedComposition);
        public IQueryable<ListenedGenre> GetListenedGenres(){ return ListenedGenres; }
        void IDMDBContext.Add(ListenedGenre listenedGenre) => ListenedGenres.Add(listenedGenre);
        public IQueryable<Moderator> GetModerators(){ return Moderators; }
        void IDMDBContext.Add(Moderator moderator) => Moderators.Add(moderator);
        public IQueryable<Musician> GetMusicians(){ return Musicians; }
        void IDMDBContext.Add(Musician musician) => Musicians.Add(musician);
        public IQueryable<MusicianRole> GetMusicianRoles(){ return MusicianRoles; }
        void IDMDBContext.Add(MusicianRole musicianRole) => MusicianRoles.Add(musicianRole);
        public IQueryable<Picture> GetPictures(){ return Pictures; }
        void IDMDBContext.Add(Picture picture) => Pictures.Add(picture);
        public IQueryable<User> GetUsers(){ return Users; }
        void IDMDBContext.Add(User user) => Users.Add(user);
        public IQueryable<Video> GetVideos(){ return Videos; }
        void IDMDBContext.Add(Video video) => Videos.Add(video); 
        void IDMDBContext.UpdateAndSaveChanges<TEntity>(TEntity entity)
        {
            DbEntityEntry entry = Entry(entity);
            entry.State = EntityState.Modified;
            SaveChanges();
        }
    }
}
